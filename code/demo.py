"""
    Name: Kaushik S Kalmady
    Date: 8/10/2017

    Demo of RFI mitigation using UNet
    HIDE and SEEK packages are used for simulating and generating data and
    groundtruths

    Follow instructions in process_data.py, and training_unet.py and run them
    before you run this script.
    This code requires the cpkt files generated by that script.


    You will also need to have tf_unet installed.
    For installation instructions: tf_unet.readthedocs.io


"""


from __future__ import division, print_function
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import glob
import os
from scripts.radio_util import DataProvider
from tf_unet import unet


def load_data():
    """
    Returns the Bleien Survery data and the HIDE simulated data after loading
    them separately
    """

    # You can use two dataproviders for each path
    # Define Bleien data files path
    bleien_path = "./bgs_example_data/2016/03/21"
    hide_path = "./bgs_generated_data/2016/03/21"

    # Load data file names
    bleien_files = glob.glob(bleien_path)
    hide_files = glob.glob(hide_path)

    # Define data_providers
    bleien_data_provider = DataProvider(600, bleien_files)
    hide_data_provider = DataProvider(600, hide_files)

    # Load data using two dataproviders
    # _ is used for variables we don't want
    bleien_data, _ = bleien_data_provider(len(bleien_files))
    hide_data, _ =  hide_data_provider(len(hide_files))

    return bleien_data, hide_data


def display_side_by_side(first, second):
    """
    Display two tod data side by side

    parameters
    ===========
    first : first data variable
    second : second data variable'

    """

    fig, ax = plt.subplots(1,2, figsize=(12,4))

    # plot first and second data as in visual.py
    ax[0].imshow(first[0, ..., 0], aspect="auto")
    ax[1].imshow(second[0, ..., 1], aspect="auto")

    plt.show()


def load_and_predict(data):
    """
    Return UNet predicted output and SEEK's sum_threshold output (check RFI
    mitigation page in SEEK docs)

    """

    # Define Unet
    unet = unet.Unet(channels=data_provider.channels,
                n_class=data_provider.n_class,
                layers=3,
                features_root=64,
                cost_kwargs=dict(regularizer=0.001),
                )


    # Path to cpkt file of trained Unet
    path = "./unet_trained_bgs_example_data/model.cpkt"

    # Predict using Unet
    data_provider = DataProvider(600, data)
    x_test, y_test = data_provider(1)
    unet_predict = unet.predict(path, data)

    fig, ax = plt.subplots(1,3, figsize=(12,4))
    ax[0].imshow(x_test[0,...,0], aspect="auto")
    ax[1].imshow(y_test[j,...,1], aspect="auto")
    ax[2].imshow(unet_predict[0,...,1], aspect="auto",cmap="gray")
    fig.savefig("pred"+str(1)+".png")

    # Predict using SEEK's sum_threshold

    with h5py.File("data", "r") as fp:
        timeord = fp["P/Phase1"].value



if __name__ == "__main__":

    # Load both bleien data and hide data
    bleien_data, hide_data = load_data()

    # Visualise both data
    # This is to show that both the data are pretty similar
    display_side_by_side(bleien_data, hide_data)

    # Make predicitons on the hide data
    load_and_predict(hide_data)

    # Display results
    #display_side_by_side(unet_predict, seek_predict)
